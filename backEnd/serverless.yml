
service: capstone-chat-backend

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

frameworkVersion: '2'



provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: 20201221
  websocketsApiName: capstone-websocket-api
  websocketsApiRouteSelectionExpression: $request.body.action

  environment:
    SESSIONS_TABLE: SESSIONS_TABLE
    SESSIONS_INDEX: SESSIONS_INDEX
    USERS_TABLE: USERS_TABLE2
  

functions:

  Auth: 
    handler: src/lambda/authorizer.handler
  
  connectHandler:
    handler: src/lambda/socketHandler.connectHandler
    events:
      - websocket:
          route: $connect
          authorizer: 
            name: Auth
            identitySource:
              - 'route.request.querystring.Auth'
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSIONS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: arn:aws:execute-api:${self:provider.region}:*:*
      
  
  disconnectHandler:
    handler: src/lambda/socketHandler.disconnectHandler
    events:
      - websocket: $disconnect
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSIONS_TABLE}

  defaultHandler:
    handler: src/lambda/socketHandler.defaultHandler
    events:
      - websocket: $default


resources:

  Resources:

    # Table to keep track of the websocket connections
    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: princId
            AttributeType: S          
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: loggedIn
            AttributeType: S          
        KeySchema:
          - AttributeName: princId
            KeyType: HASH
          - AttributeName: connectionId
            KeyType: RANGE          
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SESSIONS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SESSIONS_INDEX}
            KeySchema:
              - AttributeName: princId
                KeyType: HASH
              - AttributeName: loggedIn
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # Table to keep track of the user profiles (kept persistently between sessions)
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: princId
            AttributeType: S                    
        KeySchema:
          - AttributeName: princId
            KeyType: HASH          
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        
